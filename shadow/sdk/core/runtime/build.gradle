/**
 * shadow-runtime是运行时Shadow App所依赖的类。
 *
 * 这里面的类混淆意义不大，对体积缩减需求也不强。
 * shadow-loader的Debug版依赖这个模块的Debug版
 * shadow-loader的Release版依赖这个模块的Release版
 * shadow-transform依赖这个模块的Release版
 * 因此暂定这个模块不混淆，保持Debug版和Release版无差别。
 */

apply plugin: 'com.android.library'

group 'com.tencent.shadow.core'

android {
    compileSdkVersion COMPILE_SDK_VERSION

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION

        //gradle的编译版本升级到4.1之后，废弃了VERSION_CODE和VERSION_NAME，需要自己定义这两个字段了
        buildConfigField "int", 'VERSION_CODE', String.valueOf(VERSION_CODE)
        buildConfigField 'String', 'VERSION_NAME', "\"" + VERSION_NAME + "\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main.java.srcDirs += project(':generate-delegate-code').buildDir.path + '/generated/DelegateCode/runtime'
    }
}

dependencies{
    implementation 'com.tencent.shadow.coding:lint'
    compileOnly project(':activity-container')
}

def jarPackage(buildType) {
    return tasks.create("jar${buildType.capitalize()}Package", Copy) {
        def aarFile = file(project.buildDir.path + "/outputs/aar/${project.name}-${buildType}.aar")
        def outputDir = file(project.buildDir.path + "/outputs/jar")

        from zipTree(aarFile)
        into outputDir
        include 'classes.jar'
        rename 'classes.jar', "${project.name}-${buildType}.jar"
        group = 'build'
        description = '生成jar包'
    }.dependsOn(project.getTasksByName("assemble${buildType.capitalize()}", false).first())
}

afterEvaluate {
    android {
        buildTypes.findAll().each { buildType ->
            def buildTypeName = buildType.getName()
            jarPackage(buildTypeName)
        }
    }
}

preBuild.dependsOn(project(":generate-delegate-code").getTasksByName("generateDelegateCode", false).first())
